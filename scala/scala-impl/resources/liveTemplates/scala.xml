<?xml version="1.0" encoding="UTF-8"?>
<!--
TODO: review macros expresisons, looks like most of them do not work now
 expressions should start with `scala_` prefix (see org.jetbrains.plugins.scala.codeInsight.template.macros.ScalaMacro.getName)
-->
<templateSet group="scala">
  <template name="main" value="def main(args: Array[String]): Unit = {&#13;&#10;  $END$&#13;&#10;}"
            resource-bundle="messages.ScalaEditorBundle" key="template.for.main.method"
            toReformat="true" toShortenFQNames="true">
    <context>
      <option name="SCALA_CODE" value="true"/>
    </context>
  </template>
  <template name="opt" value="$OPTION$ match {&#13;&#10;  case Some($NAME$) => $END$&#13;&#10;  case None =>&#13;&#10;}"
            resource-bundle="messages.ScalaEditorBundle" key="template.for.matching.option.type"
            toReformat="false" toShortenFQNames="true">
    <variable name="OPTION" expression="scalaVariableOfType(&quot;scala.Option&quot;)" defaultValue="option" alwaysStopAt="true"/>
    <variable name="NAME" expression="suggestScalaVariableName(&quot;option&quot;, OPTION)" defaultValue="x" alwaysStopAt="true"/>
    <context>
      <option name="SCALA_CODE" value="true"/>
    </context>
  </template>
  <template name="itr" value="for ($NAME$ &lt;- $FOR$ $GUARD$) {&#13;&#10;  $END$&#13;&#10;  }"
            resource-bundle="messages.ScalaEditorBundle" key="template.for.scala.for"
            toReformat="true" toShortenFQNames="true">
    <variable name="FOR" expression="scalaVariableOfType(&quot;foreach&quot;)" defaultValue="option" alwaysStopAt="true"/>
    <variable name="NAME" expression="suggestScalaVariableName(&quot;foreach&quot;, FOR)" defaultValue="x" alwaysStopAt="true"/>
    <variable name="GUARD" expression="" defaultValue="" alwaysStopAt="true"/>
    <context>
      <option name="SCALA_CODE" value="true"/>
    </context>
  </template>
  <template name="itry" value="for ($NAME$ &lt;- $FOR$ $GUARD$) yield {&#13;&#10;  $END$&#13;&#10;  }"
            resource-bundle="messages.ScalaEditorBundle" key="template.for.scala.for.yield"
            toReformat="true" toShortenFQNames="true">
    <variable name="FOR" expression="scalaVariableOfType(&quot;foreach&quot;)" defaultValue="option" alwaysStopAt="true"/>
    <variable name="NAME" expression="suggestScalaVariableName(&quot;foreach&quot;, FOR)" defaultValue="x" alwaysStopAt="true"/>
    <variable name="GUARD" expression="" defaultValue="" alwaysStopAt="true"/>
    <context>
      <option name="SCALA_CODE" value="true"/>
    </context>
  </template>
  <template name="priv" value="println(s&quot;$EXPR_COPY$ = $${$EXPR$}&quot;)"
            resource-bundle="messages.ScalaEditorBundle" key="template.for.expressions.output"
            toReformat="true" toShortenFQNames="true">
    <variable alwaysStopAt="true" defaultValue="false" name="EXPR" expression="scalaVariableOfType(&quot;&quot;)"/>
    <variable alwaysStopAt="false" defaultValue="" name="EXPR_COPY" expression="EXPR"/>
    <context>
      <option name="SCALA_CODE" value="true"/>
    </context>
  </template>
  <template name="T" value="&lt;$TAG$&gt;$SELECTION$&lt;/$TAGNAME$&gt;&#13;&#10;"
            resource-bundle="messages.ScalaEditorBundle" key="surround.with.xml"
            toReformat="true" toShortenFQNames="true" >
    <variable name="TAG" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="SELECTION" expression="" defaultValue="" alwaysStopAt="false" />
    <variable name="TAGNAME" expression="firstWord(TAG)" defaultValue="&quot;&quot;" alwaysStopAt="false" />
    <context>
      <option name="SCALA_XML" value="true"/>
    </context>
  </template>
  <template name="unapply" value="def unapply$TYPE_ARGS$(arg: $CLASS_NAME$$TYPE_ARGS_SHORT$): Option[$RET_TYPE$] = $BODY$$END$"
            resource-bundle="messages.ScalaEditorBundle" key="template.for.unapply"
            toReformat="true" toShortenFQNames="true">
    <variable name="TYPE_ARGS"       alwaysStopAt="false" expression="scala_typeParams(scala_companionClass())" defaultValue=""/>
    <variable name="TYPE_ARGS_SHORT" alwaysStopAt="false" expression="scala_typeParamsWithoutBounds(scala_companionClass())" defaultValue=""/>
	<variable name="CLASS_NAME"      alwaysStopAt="false" expression="scala_className" defaultValue="X" />
	<variable name="RET_TYPE"        alwaysStopAt="true"  expression="scala_primaryConstructorParamTypes" defaultValue="Int" />
    <variable name="BODY"            alwaysStopAt="true"  expression="" defaultValue="&quot;???&quot;" /> <!-- TODO: we could try auto-generate unapply body? -->
	<context>
	  <option name="SCALA_CODE" value="true"/>
	</context>
  </template>
  <template name="apply" value="def apply $TYPE_ARGS$($ARGS$): $CLASS_NAME$$TYPE_ARGS_SHORT$ = new $CLASS_NAME$($ARGS_NO_TYPES$)"
            resource-bundle="messages.ScalaEditorBundle" key="template.for.apply"
            toReformat="true" toShortenFQNames="true">
    <variable name="TYPE_ARGS"       alwaysStopAt="false" expression="scala_typeParams(scala_companionClass())" defaultValue=""/>
    <variable name="TYPE_ARGS_SHORT" alwaysStopAt="false" expression="scala_typeParamsWithoutBounds(scala_companionClass())" defaultValue=""/>
    <variable name="ARGS"            alwaysStopAt="true"  expression="scala_primaryConstructorParams" defaultValue="x"/>
	<variable name="CLASS_NAME"      alwaysStopAt="false" expression="scala_className"/>
	<variable name="ARGS_NO_TYPES"   alwaysStopAt="true"  expression="scala_primaryConstructorParamNames(ARGS)"/>
	<context>
	  <option name="SCALA_CODE" value="true"/>
	</context>
  </template>
  <template name="todo" value="// TODO: $todo$ " description="adds // TODO" toReformat="true" toShortenFQNames="true">
    <variable name="todo" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="SCALA_CODE" value="true"/>
    </context>
  </template>
  <template name="imc" value="implicit class $CLASS_NAME$$SUFFIX$(private val $RECEIVER_NAME$: $TYPE_NAME$) extends AnyVal {&#13;$END$&#13;}"
            resource-bundle="messages.ScalaEditorBundle" key="template.for.extension.methods.container"
            toReformat="true" toShortenFQNames="true">
    <variable name="TYPE_NAME" defaultValue="&quot;Any&quot;" alwaysStopAt="true"/>
    <variable name="RECEIVER_NAME" expression="scala_suggestVariableNameByTypeText(TYPE_NAME)" defaultValue="&quot;target&quot;" alwaysStopAt="true"/>
    <variable name="CLASS_NAME" expression="scala_implicitValueClassName(TYPE_NAME)" alwaysStopAt="false" />
    <context>
      <option name="SCALA_CODE" value="false"/>
      <option name="SCALA_IMPLICIT_VALUE_CLASS" value="true"/>
    </context>
  </template>
</templateSet>